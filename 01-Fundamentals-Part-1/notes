Javascript:
- high-level: dont have to worry about complex stuff like memory managment
- object-oriented: based on objects for storing most kinds of data
- multi-paradigm: can use different types of programming styles
- programming language: instructs computers to do things
- has dynamic typing. dont have to define data type when storing. JS automatically does this
  - value holds the type, not the variable

7 Primitive Data types:
  1. number
  2. boolean
  3. string
  4. null
  5. undefined
  6. symbol
  7. BigInt

- when a variable is undefined, the data type is also undefined
  Ex: let year;
      console.log(year); // undefined
      console.log(typeof year); // undefined

- **: exponents (to the power of)
  - Ex: 2 ** 3 = 8

- There is precedence within operators. Math operators tend to have higher precedence than comparisons, etc
- some operators run left to right and some are right to left
  - math will be left to right
  - assignements will be right to left
- a lot like math precedence (PEMDAS)
  - * and / will have a higher precedence than + and -

- template literals can only take expressions

- type conversion: manually change from one type to another
- string + number will equal a string with the values concatinated
  Ex: '1992' + 18 = '199218'
  - to convert to number, use Number()
  - to convert to string, use String()

- type coercion: JS automatically changes types when mixing two types
  - when there is a string plus a number, number converts into a string
  Ex: const x = 'I am' + 23 + ' years old'
  x = "I am 23 years old" 
  - when you minus, times, or divide strings get converted to numbers
  Ex: "23" - "10" - 3 = 10 (number)
      "23" * "2" = 46
      "24" / 2 = 12

- 5 falsy values: 0, '', undefined, null, NaN
  - if converted to boolean, these will return false
  - everything else is a truthy value (when converted to boolean they return true)

- equality operators:
  - ===: strict operator. does not perfrom type coercion
    Ex: 18 === 18 is true
        '18' == 18 is false
  - ==: loose operator. does perform type coercion
     Ex: 18 === 18 is true
        '18' == 18 is also true

- &&, ||, !
  - ! has precedence over && and ||. when both being used in the same line, the ! will be performed first

- switch/case uses strict comparison
- must use break between cases or the code will continue to execute
- use default for invalid options

- Expressions: produces a value
  Ex: 
    - 3 + 4
    - 1992 (a singular value is still a expression)
    - true && false && !true

- Statements: performs an action but doesnt produce a value
  Ex: if (23 > 10) {
    const str = "23 is bigger";
  }
  - although the string that is being created is an expression, the whole if/else block is a statement because we are just going through action but not producing any output
