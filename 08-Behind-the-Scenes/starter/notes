Javascript is:
- High Level: 
  - does not have to worry about resource allocations because js has abstractions that takes care of that
  - although this is nice to have, the downside is that it will never be as fast as a low level language like C that requires manual allocation

- Garbage collected: 
  - js has an algorithm that gets rid of unnecessary memory usage

- Interpreted/Just-in-time compiled:
  - every language requires an abstraction that takes human code and compiles into machine code (1s and 0s). js is no different.
  - this happens inside the js engine

- Multi-paradigm: 
  - Paradigm: approach/mindset of structuring code that influences coding style and technique
  - Different styles include: Procedural programming, Object oriented programming (OOP) and Functional programming (FP)
  - can also be split between imperative and declarative programming
  - js is versatile enough that people can code in different styles
  - up to this point we have done only procedural

- Prototype-based object oriented
  - almost everything in js is an object (other than primitives like numbers)
  - prototypal inheritance: anything that is an object has a prototype blueprint that is inherited. this blueprint has methods that are attached that help whatever is being used. 
  Ex: when an array is created, with it comes an Array blueprint (object) so that include array methods like .push() and .pop() for us to use

- First class functions
  - functions are treated as variables. so you can pass them into functions and return functions

- Dynamically typed
  - we do not need to type our variables, the js engine does it on its own at runtime
  - automatically changes if we change a variable from to string to number, etc

- Single-threaded
  - concurrency model: how the js engine handles multiple tasks at once
    - we need this because js is single threaded
  - thread: set of instructions thats executed in the CPU. where the code is executed in the computers processor
  - because js is single threaded, only one thing can run at a time
  - to aleviate any traffic within the thread, there is a non blocking event loop

- Non-blocking event loop
  - when there are long running tasks, js will put them in the background, waits for it to finish then puts it back in the main loop

Javascript Engine:
  - program that executes javascript code
  - all browsers have a js engine like chrome's V8 engine
  - has 2 parts:
    - Call stack: where code is executed through execution contexts
    - Heap: unstructured memory pool that stores all objects that js needs
  
Compilation vs Interpretation:
  - Compilation: entire code is converted into machine code at once and written into a binary/portable file that can be executed by any computer at any time
    Ex: software on a computer has already converted into machine code and is only executed when software is executed
    - Source code --Compilation--> portable file (machine code) --Execution--> program running
  
  - Interpretation: interpreter runs through source code and executes line by line
    - Source Code ---Execution line by line---> Program running
  - code still needs to be converted, but with interpretation, it does it right before the program runs, not ahead of time
  - js used to be like this but this made it very slow

  - Just-in-time (JIT) compilation:
    - entire code is converted into machine code at once then executed immediately
    - Source code --Compilation--> Machine code (no portable file) --Execution (happens immediately)--> program running
    - this is how JS is now

JIT steps in the JS engine:
  1. Parsing: code is read and assembles the abstract syntax tree (AST)
    - in the AST are parts of the code that are important to the language (let, const, function, etc) are saved in a structured way
    - also checks for syntax errors
  2. Compilation: takes AST and compiles it into machine code
  3. Execution: executes the machine code from compilation
    - happens in the call stack
    - optimization happens during this step:
      - the engine will continously compile and execute to make the code more effecient
      - the first instance of compilation and execution will not be the most effecient version of the code. this is to have something to execute quickly. it will then run compilation and execution to make the code more effecient all while still executing
  
  - all this is separate from the js main thread and is not accessible through code

JS runtime:
  - most common runtime is the browswer
  - Container for all things that we need to use in js (the JS engine, Web APIs, and the callback queue)
  - the heart of any JS runtime is the JS engine (heap and call stack)
  - Web APIs:
    - functionalities that are accessible to JS through the window object but not actually part of JS
    - includes the DOM, APIs (like console.log()), fetch, etc
  - Callback queue:
    - contains all callback functions that we need in the program
    Ex: event listeners, timers
    - the event loop is the connection between the callback queue and the call stack
  - there are other JS runtimes that arent browsers and those look a little different (no web APIs)

Execution Context (EC):
- environment where a piece of JS is executed. stores all necessary info for the code to execute
- During execution: 
  1. the global execution context is created first. contains all top level code that is not inside of a function
    - this saves and prepares the functions that are declared in the top level, but not ran
    - there is only ever one global EC
  2. then top level code is executed inside the global EC
  3. finally other functions are executed and callbacks wait to be called
    - there is one EC for every function, every function call and methods with all the necessary information to run that function
    - all of the ECs together make up the call stack
    - once all the functions are executed, the call stack waits for callbacks to be called (like click events)
      - event loop is what brings the callbacks to the call stack

- Execution Context anatomy:
  1. Variable environment
    - let, const and var declarations
    - functions
    - argument objects
  2. Scope chain
  3. this keyword

  - these 3 things are created during the creation phase right before execution
  - arrow functions do not get an arguments object or a this keyword
    - arrow functions borrow these two things from their closest regular function parent
  - the value of each variable or function is not known during creation, only till execution happens
  - the call stack is made up of ECs stacked upon each other to keep track of where we are in execution
    - the exectution of theses ECs depend on how functions are called, but only one EC is ran at a time (single threaded)
    - ECs can be paused if there is function inside a function. the outer function (EC) will pause to allow the inner function to finish. then the thread will return to the outer function

Scope:
  - Scoping: How our programs variables are organized and accessed by the js engine
  - Lexical scoping: rules of where we can access variables are based on exactly where in the code functions and blocks are written
  - Scope: space or environment in which a certain variable is declared
  - Scope of a variable: region of our code where a certain variable can be accessed
  - 3 types of scope:
    - Global: outside of any function or block. Accessible anywhere
    - Function (Local): variables are accessible only inside the function, not outside
    - Block: variables are accessible only inside block
      - only applies to let and const (var is only function scoped)
      - functions are also block scoped (in strict mode)
  - Scope Chain:
    - every scope always has access to all the variable from all its outer scopes (but not inner scopes nor siblings)
    - Variable Lookup: the engine looks up in the scope chain until it finds the variable its looking for when its not in the current scope
    - organized by how the functions are WRITTEN in the code
    - has nothing to do with how they are CALLED in the code (the call stack takes care of this)

Hoisting:
  - makes some types of variables accessible/usable in the code before declared. Variable lifted to the top of their scope
  - before execution, code is scanned for variable declarations. 
    - for each new variable, a new property is created in the variable environment object
  - helps use functions before actual declarations (recursion, etc)
    - the only function you can use before declaring it is a function declaration
  - var hoisting is a byproduct of function hoisting
  
  - How different variable/function declarations behave with hoisting:
    - Function declarations: 
      - Hoisted: Yes
      - Initial value: actual function
      - Scope: Block (with strict mode)
    - var variables: 
      - Hoisted: Yes
      - Initial value: undefined
      - Scope: function
    - let/const variables: 
      - Hoisted: No
      - Initial value: <uninitialized>, TDZ
      - Scope: Block
    - Function expressions and arrows: 
      - depends if using var or let/const

  - calling a function expression or arrow function that is declared with var wont work even though it is hoisted. this is becuase the function is undefined until called.
  Ex: conosle.log(add(2, 3)) 
  // js will run this as console.log(undefined(2,3)) because the function variable was hoisted without its definition. wont be defined until declaration

  var add = (a, b) => {
    return a + b;
  }

  - using var on the global scope will create a property of the same name in the window object
    Ex: var x = 1;
    x === window.x (returns true)
    - let and const will not create a property in the window object

Temporal Dead Zone (TDZ):
- region of the scope that a variable is defined, but cant be used in any way
- let and const get their own TDZ that starts at the beginning of the scope until the line where it is defined.
  - that variable is only safe to use after the line where its defined
- in place to avoid and catch errors. bad practice to access variables before declaration
- helps const variables work
  - doesnt allow const to be reassigned
  - only assigned when execution reaches the declaration 

Ex: const myName = "Ricky"

if (myName === "Ricky") {
  console.log(`${myName} is a ${job}`);
  const age = 2037 - 1992;
  console.log(age)
  const job = "engineer";
  console.log(x)
}

- the TDZ for the job variable is the 3 lines before it up to where its declared.
- the first console.log will return "ReferenceError: Cannot access job before initilization" because we are trying to access job in its TDZ
- the last console.log will return "ReferenceError: x is not defined" because there is no x variable in the scope

This keyword:
- special variable created for every EC
- takes the value of (points to) the "owner" of the function in which the this keyword is used
- 'this' is not static.
  - depends on how the function is called
  - value is assigned only when the function is called
- Few different ways to call a function and 'this' plays behaves
  1. Method: this = object that is calling methods
  Ex: const ricky = {
    name: "ricky",
    year: 1992,
    calcAge: function () {
      return 2037 - this.year
    }
  }
  ricky.calcAge() // 45 
  - because calcAge is being called on the ricky object, this will also point to the ricky object
  2. Simple function call: this = undefined (only in strict mode)
    - if not in strict mode, this will point to the global window object
  3. Arrow functions: this = this keyword of closest parent function (lexical this)
    - arrow functions dont get their own this keyword
  4. Event listener: this = DOM element that the handler is attached to
  5. new, call, apply, bind (later in the course)

  - 'this' does not point to the function itself and also not its variable environment




